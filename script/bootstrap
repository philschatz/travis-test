#!/bin/bash

set -e

cd "$(dirname "$0")/.."

# Resolve all dependencies that the application requires to run.
# From https://github.com/github/scripts-to-rule-them-all/blob/master/script/bootstrap
# Also from https://github.com/Connexions/cnx-rulesets


if [[ -f "Brewfile" ]] && [[ "$(uname -s)" = "Darwin" ]]; then
  >&2 echo "==> Updating Homebrew…"
  if [[ ! $(which brew) ]]; then
    >&2 echo "ERROR: Install homebrew from https://brew.sh"
    exit 1
  fi
  brew update || exit 1
  brew bundle check >/dev/null 2>&1  || {
    brew bundle || exit 1
  }
fi

# Skip .nvmrc , .node-version and virtualenv when running Travis
# because Travis already detects those files
if [[ "$TRAVIS" != "true" ]]; then

  # Set up the correct version of node
  if [[ -f ".nvmrc" ]]; then
    >&2 echo "==> Setting up node version"
    if [[ -f ~/.nvm/nvm.sh ]]; then
      source ~/.nvm/nvm.sh
      nvm install $(< .nvmrc)
    else
      >&2 echo "WARNING: nvm is not installed. See https://github.com/creationix/nvm. Using node: $(node --version)"
    fi
  fi

  # Install https://yarnpkg.com (package manager)
  if [[ ! $(which yarn) ]]; then
    # Prompt when on debian
    if [[ $(which apt-key) ]]; then
      read -p "Would you like to install yarn (y/N)?" choice
      echo # Move to a new line
      if [[ "${choice}" =~ ^[Yy]$ ]]; then
        >&2 echo "==> Installing yarn. You may be prompted for a password"
        curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - || exit 1
        echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list || exit 1
        sudo apt-get update && sudo apt-get install yarn || exit 1
      else
        echo "Yarn is not installed. Exiting"
        exit 1
      fi
    else
      echo "Not sure how to install yarn automatically. If you are using macOS do you have https://brew.sh installed?"
      exit 1
    fi
  fi

  # Set up the correct version of ruby
  if [[ -f ".ruby-version" ]]; then
    if [[ -n $(which rbenv) ]]; then
      eval "$(rbenv init -)" # Initialize rbenv
      if [ -z "$(rbenv version-name 2>/dev/null)" ]; then
        >&2 echo "==> Installing Ruby…"
        rbenv install --skip-existing
      fi
    else
      >&2 echo "ERROR: rbenv is not installed. see https://github.com/rbenv/rbenv"
      exit 1
    fi
  fi

  if [[ -f ".ruby-version" ]] || [[ -f "Gemfile" ]]; then
    gem list -i bundler >/dev/null 2>&1  || {
      >&2 echo "==> Installing Ruby Bundler gem…"
      gem install bundler || {
        >&2 echo 'ERROR: Problem installing ruby bundler.'
        exit 1
      }
      rbenv rehash
    }
  fi

  if [ -f "Gemfile" ]; then
    >&2 echo "==> Installing gem dependencies…"
    which bundle
    bundle check --path vendor/gems >/dev/null 2>&1  || {
      bundle install --path vendor/gems --quiet --without production
    }
  fi
fi
